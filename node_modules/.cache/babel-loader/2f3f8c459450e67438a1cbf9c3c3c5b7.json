{"remainingRequest":"C:\\Users\\81981\\Desktop\\vue-element-admin-4.0.0\\ManagerSystem\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\81981\\Desktop\\vue-element-admin-4.0.0\\ManagerSystem\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\81981\\Desktop\\vue-element-admin-4.0.0\\ManagerSystem\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\81981\\Desktop\\vue-element-admin-4.0.0\\ManagerSystem\\src\\views\\zsgCCD1\\list\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\81981\\Desktop\\vue-element-admin-4.0.0\\ManagerSystem\\src\\views\\zsgCCD1\\list\\index.vue","mtime":1608977365801},{"path":"C:\\Users\\81981\\Desktop\\vue-element-admin-4.0.0\\ManagerSystem\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\81981\\Desktop\\vue-element-admin-4.0.0\\ManagerSystem\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\81981\\Desktop\\vue-element-admin-4.0.0\\ManagerSystem\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\81981\\Desktop\\vue-element-admin-4.0.0\\ManagerSystem\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"C:/Users/81981/Desktop/vue-element-admin-4.0.0/ManagerSystem/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.array.find-index\");\n\nrequire(\"core-js/modules/es6.function.name\");\n\nvar _eventBus = _interopRequireDefault(require(\"../../../utils/eventBus.js\"));\n\nvar _jsCookie = _interopRequireDefault(require(\"js-cookie\"));\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar id = 1000;\nvar _default = {\n  name: 'Index',\n  data: function data() {\n    return {\n      labelName: '菜单根节点',\n      data: [{\n        id: 1,\n        label: '菜单根节点',\n        children: [{\n          id: 2,\n          label: '工作台',\n          name: 'workTable'\n        }, {\n          id: 3,\n          name: 'resourceSituation',\n          label: '资源运行情况'\n        }, {\n          id: 4,\n          name: 'workPaper',\n          label: '工单管理'\n        }, {\n          id: 5,\n          name: 'resourceManage',\n          label: '资源管理'\n        }, {\n          id: 6,\n          name: 'systemmanage',\n          label: '系统管理'\n        }, {\n          id: 7,\n          name: 'smartEcharts',\n          label: '智能报表'\n        }, {\n          id: 8,\n          name: 'watchInfos',\n          label: '监控项信息'\n        }]\n      }],\n      data2: {},\n      defaultProps: {\n        children: 'children',\n        label: 'label'\n      },\n      nowClickData: {},\n      update: true\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    if (_jsCookie.default.get('ha')) {\n      this.data = _jsCookie.default.get('ha');\n      console.log('listCOokies!');\n    }\n\n    _eventBus.default.$on('submitCheck', function (submitForm) {\n      // console.log(submitForm)\n      var newChild = {\n        id: id++,\n        label: submitForm.name,\n        children: []\n      };\n\n      if (!_this.nowClickData.children) {\n        _this.$set(_this.nowClickData, 'children', []);\n      }\n\n      _this.nowClickData.children.push(newChild); // Cookies.set('ha', this.data)\n      // var getChange = (this.data[0].children.filter(function(item) {\n      //   return item.name === keyname\n      // }))\n      // console.log('getChange[0].label' + getChange[0].label)\n      // getChange[0].label = name\n      // console.log('keyname' + keyname)\n      // console.log(name)\n\n    });\n  },\n  methods: {\n    reloadComp: function reloadComp() {\n      location.reload();\n\n      _eventBus.default.$emit('reloadYourself');\n    },\n    handleDragStart: function handleDragStart(node, ev) {\n      console.log('drag start', node);\n    },\n    handleDragEnter: function handleDragEnter(draggingNode, dropNode, ev) {\n      console.log('tree drag enter: ', dropNode.label);\n    },\n    handleDragLeave: function handleDragLeave(draggingNode, dropNode, ev) {\n      console.log('tree drag leave: ', dropNode.label);\n    },\n    handleDragOver: function handleDragOver(draggingNode, dropNode, ev) {\n      console.log('tree drag over: ', dropNode.label);\n    },\n    handleDragEnd: function handleDragEnd(draggingNode, dropNode, dropType, ev) {\n      console.log('tree drag end: ', dropNode && dropNode.label, dropType);\n    },\n    handleDrop: function handleDrop(draggingNode, dropNode, dropType, ev) {\n      console.log('tree drop: ', dropNode.label, dropType);\n    },\n    allowDrop: function allowDrop(draggingNode, dropNode, type) {\n      if (dropNode.data.label === '二级 3-1') {\n        return type !== 'inner';\n      } else {\n        return true;\n      }\n    },\n    allowDrag: function allowDrag(draggingNode) {\n      return draggingNode.data.label.indexOf('三级 3-2-2') === -1;\n    },\n    handleNodeClick: function handleNodeClick(data, data2) {\n      // this.labelName = data.label\n      this.nowClickData = data; // console.log(data)\n\n      this.changesize(data.id, data2.parent.data.label); // console.log(data2.parent.data.label)\n    },\n    append: function append(data) {\n      var newChild = {\n        id: id++,\n        label: 'new',\n        children: []\n      };\n\n      if (!data.children) {\n        this.$set(data, 'children', []);\n      }\n\n      data.children.push(newChild);\n    },\n    remove: function remove(node, data) {\n      var parent = node.parent;\n      var children = parent.data.children || parent.data;\n      var index = children.findIndex(function (d) {\n        return d.id === data.id;\n      });\n      children.splice(index, 1);\n    },\n    // renderContent(h, { node, data, store }) {\n    //   return (`<span class='custom-tree-node'><span>{${node}.label}</span> <span> <el-button size='mini' type='text' on-click={ () => this.append(${data}) }>Append</el-button> <el-button size='mini' type='text' on-click={ () => this.remove(${node}, ${data}) }>Delete</el-button> </span> </span>\n    //   `)\n    // },\n    newChild: function newChild() {\n      // const newChild = { id: id++, label: 'new', name: 'newBorn', children: [] }\n      // if (!this.nowData.children) {\n      //   this.$set(this.nowData, 'children', [])\n      // }\n      // this.nowData.children.push(newChild)\n      // eventBus.$emit('newChild', newChild.name)\n      _eventBus.default.$emit('addTreeDone', id);\n\n      _eventBus.default.$emit('newChild', this.nowClickData.label);\n    },\n    changesize: function changesize(id, parentName) {\n      _eventBus.default.$emit('add', id, parentName);\n    }\n  }\n};\nexports.default = _default;",null]}